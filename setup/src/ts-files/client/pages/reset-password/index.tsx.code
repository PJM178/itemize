import React from "react";
import { ModuleProvider } from "@onzag/itemize/client/providers/module";
import { ItemProvider } from "@onzag/itemize/client/providers/item";
import UserActioner, { IUserActionerArg } from "@onzag/itemize/client/components/user/UserActioner";
import { localizedRedirectTo } from "@onzag/itemize/client/components/navigation";
import LocationStateReader from "@onzag/itemize/client/components/navigation/LocationStateReader";
import I18nRead from "@onzag/itemize/client/components/localization/I18nRead";
import TitleSetter from "@onzag/itemize/client/components/util/TitleSetter";
import Reader from "@onzag/itemize/client/components/property/Reader";
import Entry from "@onzag/itemize/client/components/property/Entry";

import Typography from "@mui/material/Typography";
import Button from "@mui/material/Button";
import Divider from "@mui/material/Divider";
import DoneIcon from "@mui/icons-material/Done";
import Container from "@mui/material/Container/Container";
import Paper from "@mui/material/Paper";
import TextField from "@mui/material/TextField";
import { ItemLoader } from "@onzag/itemize/client/fast-prototyping/components/item-loader";
import { ProgressingElement } from "@onzag/itemize/client/fast-prototyping/components/util";
import Snackbar from "@onzag/itemize/client/fast-prototyping/components/snackbar";

import { Avatar } from "../../components/avatar";

/**
 * Contains the reset password styles
 */
const style = {
	container: {
		paddingTop: "1rem",
	},
	paper: {
		padding: "1rem",
	},
	username: {
		fontWeight: 300,
		width: "100%",
		marginTop: "1rem",
		textAlign: "center",
	},
	recoverTitle: {
		fontWeight: 300,
		margin: "1rem 0",
		width: "100%",
		textAlign: "center",
	},
	divider: {
		margin: "1rem 0",
	},
};

/**
 * The action as asked once the reset password has been requested
 * @param token the token for resetting the password
 * @param actioner and the user actioner
 */
async function resetPassword(
	userRandomId: string,
	randomId: string,
	randomIdType: "email" | "phone",
	randomIdValue: string,
	token: string,
	actioner: IUserActionerArg,
) {
	const result = userRandomId ?
		(
			randomIdType === "phone" ?
			await actioner.resetPasswordWithSMSReceivedRandomId(randomId, randomIdValue, true) :
			await actioner.resetPasswordWithEmailReceivedRandomId(randomId, randomIdValue, true)
		) :
		await actioner.resetPasswordWithToken(token, true);
	if (!result.error) {
		// we give the reset_password_success message from the root message
		localizedRedirectTo("/?msg=reset_password_success&msgtitle=reset_password", null, true);
	}
}

/**
 * A compliant fast prototyping reset password component, extract
 * both the token and the id from the location state by using the location state reader
 * from the query string and uses such info in the user actioner
 * @param props the reset password props
 * @returns a react element
 */
export function ResetPassword() {
	return (
		<LocationStateReader
			defaultState={{
				token: null as string,
				id: null as string,
				userandomid: null as string,
				randomidtype: null as string,
				randomidvalue: null as string,
				randomid: ""
			}}
			stateIsInQueryString={true}
		>
			{(state, setState) => {
				const userId = state.id;

				const setRandomId = (e: React.ChangeEvent<HTMLInputElement>) => {
					setState({
						randomid: e.target.value,
					}, true)
				}

				return (
					<ModuleProvider module="users">
						<ItemProvider
							itemDefinition="user"
							properties={[
								"username",
								"profile_picture",
								"password",
								"role",
							]}
							forId={userId}
							mountId="reset-password"
							cleanOnDismount={{
								propertiesToRestoreOnAny: ["password"],
							}}
						>
							<I18nRead id="reset_password" capitalize={true}>
								{(i18nResetPassword: string) => (
									<>
										<TitleSetter>
											{i18nResetPassword}
										</TitleSetter>
										<Container maxWidth="md" sx={style.container}>
											<Paper sx={style.paper}>
												{userId ?
													<><ItemLoader>
														<Avatar size="large" fullWidth={true} hideFlag={true} />
														<Reader id="username">
															{(username: string) => (
																<Typography variant="h4" sx={style.username}>{username}</Typography>
															)}
														</Reader>
													</ItemLoader>
														<Divider sx={style.divider} />
													</> : null
												}
												<Typography variant="h6" sx={style.recoverTitle}>{i18nResetPassword}</Typography>
												<I18nRead id="reset_password_field_alt_label">
													{(i18nAltLabel: string) => (
														<I18nRead id="reset_password_field_alt_placeholder">
															{(i18nAltPlaceholder: string) => (
																<I18nRead id="reset_password_message">
																	{(i18nAltDescription: string) => (
																		<Entry
																			id="password"
																			altLabel={i18nAltLabel}
																			altPlaceholder={i18nAltPlaceholder}
																			altDescription={i18nAltDescription}
																			autoFocus={true}
																		/>
																	)}
																</I18nRead>
															)}
														</I18nRead>
													)}
												</I18nRead>
												{state.userandomid ? <I18nRead id="reset_password_insert_code_label">
													{(i18nLabel: string) => (
														<TextField
															variant="filled"
															color="primary"
															value={state.randomid || ""}
															onChange={setRandomId}
															label={i18nLabel}
															placeholder={i18nLabel}
														/>
													)}
												</I18nRead> : null}
												<UserActioner>
													{(actioner) => (
														<>
															<I18nRead id="reset_password_action">
																{(i18nUpdatePassword: string) => (
																	<ProgressingElement isProgressing={actioner.statefulOnProgress} fullWidth={true}>
																		<Button
																			aria-label={i18nUpdatePassword}
																			fullWidth={true}
																			size="large"
																			variant="contained"
																			color="primary"
																			endIcon={<DoneIcon />}
																			onClick={resetPassword.bind(null, state.userandomid, state.randomid, state.randomidtype, state.randomidvalue, state.token, actioner)}
																		>
																			{i18nUpdatePassword}
																		</Button>
																	</ProgressingElement>
																)}
															</I18nRead>
															<Snackbar
																id="reset-password-error"
																severity="error"
																i18nDisplay={actioner.statefulError}
																open={!!actioner.statefulError}
																onClose={actioner.dismissStatefulError}
															/>
															<Snackbar
																id="reset-password-success"
																severity="success"
																i18nDisplay="reset_password_success"
																open={!!actioner.statefulSuccess}
																onClose={actioner.dismissStatefulSuccess}
															/>
														</>
													)}
												</UserActioner>
											</Paper>
										</Container>
									</>
								)}
							</I18nRead>
						</ItemProvider>
					</ModuleProvider>
				);
			}}
		</LocationStateReader>
	);
};

$property-entry-error-height: 1rem;
$property-entry-error-font-height: 0.65rem;
$property-entry-color-default: #424242;
$property-entry-color-error: #f44336;
$property-entry-color-error-clear: #e57373;
$property-entry-color-icon-focused: #303f9f;

.property-entry--error {
  color: $property-entry-color-error-clear;
  height: $property-entry-error-height;
  font-size: $property-entry-error-font-height;
}

.property-entry--icon {
  color: $property-entry-color-default;
}

.property-entry--input--menu-item-placeholder {
  // undebuggable style this is the only way to overwrite it
  // it can't be debugged any attempt to debug on why the placeholder is
  // gray will make it become white
  background-color: inherit !important;
}

.property-entry--field {
  width: 100%;

  .property-entry--field--button {
    border: solid 1px rgba(0, 0, 0, 0.1);
  }
}

.focused {
  .property-entry--icon {
    color: $property-entry-color-icon-focused;
  }
}

// This is for entires that are user set or that have been poked
// a poked field is poked just to display errors, eg. it's basically
// going to display any errors as if the user had set it
.property-entry--invalid.property-entry--user-set, .property-entry--invalid.property-entry--poked {

  // We set the colors of errors when we are in this state
  // this part of the code is specific to fields
  // note how this is part of the same element, a entry is a field
  &.property-entry--field {
    // this basically sets up the border bottom color of the field
    // when it's in default mode, not focused, we use the clear color, lighter
    .property-entry--input::before {
      border-bottom-color: $property-entry-color-error-clear;
    }

    // this also sets the line of the border bottom color of the field
    // this is when it is focused, so we use a more punchy color
    .property-entry--input::after,
    .property-entry--input:hover:not(.disabled)::before {
      border-bottom-color: $property-entry-color-error;
    }

    // this is for the label of the entry field when it's not focused
    .property-entry--label {
      color: $property-entry-color-error-clear;
    }

    // the same but when it's focused
    .property-entry--label.focused {
      color: $property-entry-color-error;
    }
  }

  &.property-entry--rich-text, &.property-entry--switch, &.property-entry--radio {
    .property-entry--label {
      color: $property-entry-color-error;
    }
  }

  // set the color of the icon if there is one
  // the icon keeps the strong color regardless on
  // it being focused or not
  .property-entry--icon {
    color: $property-entry-color-error;
  }
}

// For fields that are hidden, they are supposed not to be shown
// but they might be displayed for development reasons, something simple
.property-entry--hidden {
  opacity: 0.35;
}

// this is special and it's actually outside of the property-entry itself, it becomes its parent
// so it has to be outside here, they are containers after all
.property-entry--field--autocomplete-container {
  position: relative;
  display: block;
  width: 100%;

  .property-entry--field--autocomplete-suggestions-container {
    position: absolute;
    display: block;
    width: 100%;
    top: calc(100% - #{$property-entry-error-height});
    z-index: 1000;
  }
}

.property-entry--rich-text {
  .property-entry--label {
    display: flex;
    align-items: center;
    padding: 10px 0;
  }
}

.property-entry--radio {
  width: 100%;
  display: flex;
}

.property-entry--switch, .property-entry--radio .property-entry--label, .property-entry--rich-text .property-entry--label {
  display: flex;
  align-items: center;
  justify-content: space-between;
  flex-direction: row;
  padding-right: 12px;
  width: 100%;
}
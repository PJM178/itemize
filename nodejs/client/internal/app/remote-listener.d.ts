import Root from "../../../base/Root";
import { IRegisterRequest, IOwnedSearchRegisterRequest, IParentedSearchRegisterRequest, IFeedbackRequest, IBuildNumberEvent, IOwnedSearchFeedbackRequest, IParentedSearchFeedbackRequest } from "../../../base/remote-protocol";
export declare class RemoteListener {
    private socket;
    private root;
    private listeners;
    private ownedSearchListeners;
    private parentedSearchListeners;
    private delayedFeedbacks;
    private connectionListeners;
    private appUpdatedListeners;
    private lastRecievedBuildNumber;
    private uuid;
    private isReconnect;
    private offline;
    private token;
    private isReady;
    constructor(root: Root);
    setToken(token: string): void;
    onBuildnumberListened(build: IBuildNumberEvent): void;
    getUUID(): string;
    isOffline(): boolean;
    addAppUpdatedListener(listener: () => void): void;
    removeAppUpdatedListener(listener: () => void): void;
    isAppUpdated(): boolean;
    addConnectStatusListener(listener: () => void): void;
    removeConnectStatusListener(listener: () => void): void;
    addItemDefinitionListenerFor(parentInstance: any, itemDefinitionQualifiedPathName: string, forId: number, forVersion: string): void;
    attachItemDefinitionListenerFor(request: IRegisterRequest): void;
    attachOwnedSearchListenerFor(request: IOwnedSearchRegisterRequest): void;
    attachParentedSearchListenerFor(request: IParentedSearchRegisterRequest): void;
    requestOwnedSearchFeedbackFor(request: IOwnedSearchFeedbackRequest): void;
    requestParentedSearchFeedbackFor(request: IParentedSearchFeedbackRequest): void;
    addOwnedSearchListenerFor(itemDefinitionOrModuleQualifiedPathName: string, createdBy: number, lastKnownRecordDate: string, callback: () => any): void;
    addParentedSearchListenerFor(itemDefinitionOrModuleQualifiedPathName: string, parentType: string, parentId: number, parentVersion: string, lastKnownRecordDate: string, callback: () => any): void;
    requestFeedbackFor(request: IFeedbackRequest, immediate?: boolean): void;
    removeItemDefinitionListenerFor(parentInstance: any, itemDefinitionQualifiedPathName: string, forId: number, forVersion: string): void;
    removeOwnedSearchListenerFor(callback: () => any, itemDefinitionOrModuleQualifiedPathName: string, createdBy: number): void;
    removeParentedSearchListenerFor(callback: () => any, itemDefinitionOrModuleQualifiedPathName: string, parentType: string, parentId: number, parentVersion: string): void;
    private onChangeListened;
    private consumeDelayedFeedbacks;
    private onIdentificationDone;
    private reattachListeners;
    private onRecordsAddedToOwnedSearch;
    private onRecordsAddedToParentedSearch;
    private onDisconnect;
}
